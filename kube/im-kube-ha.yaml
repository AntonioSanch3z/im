# User roles for the ingress-controller
---
apiVersion: v1
kind: Namespace
metadata:
  name: im
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: im-ingress-controller
  namespace: im
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: im-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: im-ingress-controller
  namespace: im
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: im-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: im-ingress-controller
subjects:
  - kind: ServiceAccount
    name: im-ingress-controller
    namespace: im
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: im-ingress-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: im-ingress-controller
  namespace: im
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: im-ingress-controller
subjects:
  - kind: ServiceAccount
    name: im-ingress-controller
    namespace: im
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: im-ingress-controller

# Persistent Volumes in NFS
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: im
  name: pvnfsmysql
spec:
  storageClassName: mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  mountOptions:
    - nolock
    - hard
  nfs:
    path: /pv/im/mysql
    server: kubeserver
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: im
  name: pvnfsim
spec:
  storageClassName: im
  capacity:
    storage: 10Gi
  accessModes:
    - ReadOnlyMany
  mountOptions:
    - nolock
    - hard
  nfs:
    path: /pv/im/etc
    server: kubeserver
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: im
  name: pvnfslog
spec:
  storageClassName: imlog
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  mountOptions:
    - nolock
    - hard
  nfs:
    path: /pv/im/log
    server: kubeserver
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: im
  name: imdb
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: im
  name: imetc
spec:
  storageClassName: im
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 8Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: im
  name: imlog
spec:
  storageClassName: imlog
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
# Deployments for the IM service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-mysql
  labels:
    app: im
    tier: im-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-mysql
  template:
    metadata:
      labels:
        name: im-mysql
        app: im
        tier: im-mysql
    spec:
      nodeSelector:
        role: wn
      containers:
        - name: im-mysql
          image: mysql:5.6
          ports:
          - containerPort: 3306
            name: mysql
          env:
           - name: MYSQL_ROOT_PASSWORD
             value: im-mysql-pass
           - name: MYSQL_DATABASE
             value: im-db
          volumeMounts:
           - name: im-mysql-db
             mountPath: /var/lib/mysql
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 20
            periodSeconds: 20
      volumes:
        - name: im-mysql-db
          persistentVolumeClaim:
            claimName: imdb
---
apiVersion: v1
kind: Service
metadata:
  namespace: im
  name: im-mysql
  labels:
    app: im
spec:
  ports:
  - port: 3306
    protocol: TCP
  selector:
    name: im-mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-backend
  labels:
    run: im-backend
spec:
  replicas: 6
  selector:
    matchLabels:
      run: im-backend
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        run: im-backend
    spec:
      nodeSelector:
        role: wn
      containers:
      - name: im-backend
        image: grycap/im:1.7.0
        ports:
        - containerPort: 8800
        imagePullPolicy: Always
        env:
          - name: IM_DATA_DB
            value: mysql://root:im-mysql-pass@im-mysql/im-db
        volumeMounts:
           - name: imetc
             mountPath: /etc/im
        livenessProbe:
          httpGet:
            path: /version
            port: 8800
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
        - name: imetc
          persistentVolumeClaim:
            claimName: imetc

---
apiVersion: v1
kind: Service
metadata:
  name: im-backend
  namespace: im
spec:
  ports:
  - port: 8800
  selector:
    run: im-backend

# Deployment for the Syslog service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-log
  labels:
    app: im
    tier: im-log
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-log
  template:
    metadata:
      labels:
        name: im-log
        app: im
        tier: im-log
    spec:
      nodeSelector:
        role: wn
      containers:
        - name: im-log
          image: voxxit/rsyslog
          ports:
          - containerPort: 514
            protocol: TCP
            name: syslogtcp
          - containerPort: 514
            protocol: UDP
            name: syslog
          volumeMounts:
           - name: im-logs
             mountPath: /var/log
      volumes:
        - name: im-logs
          persistentVolumeClaim:
            claimName: imlog
# And the service
---
apiVersion: v1
kind: Service
metadata:
  namespace: im
  name: im-log
  labels:
    app: im
spec:
  ports:
  - port: 514
    protocol: TCP
    targetPort: 514
    name: logtcp
  - port: 514
    protocol: UDP
    targetPort: 514
    name: logudp
  selector:
    name: im-log
# ConfigMap of the haproxy-ingress see: https://github.com/jcmoraisjr/haproxy-ingress#configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress
  namespace: im
data:
  stats-auth: "micafer:grycap01"
# Ingress controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
spec:
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      serviceAccountName: im-ingress-controller
      nodeSelector:
        role: ingress-controller
      containers:
      - name: haproxy-ingress
        image: grycap/haproxy-ingress-im
        args:
        - --default-backend-service=$(POD_NAMESPACE)/im-backend
        - --configmap=$(POD_NAMESPACE)/haproxy-ingress
        - --sort-backends
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stat
          containerPort: 1936
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
           - name: imetc
             mountPath: /etc/im
        livenessProbe:
          tcpSocket:
            port: 443
          initialDelaySeconds: 20
          periodSeconds: 20
      volumes:
        - name: imetc
          persistentVolumeClaim:
            claimName: imetc
# Ingress controller service
---
apiVersion: v1
kind: Service
metadata:
  name: im-ingress-svc
  namespace: im
spec:
  type: NodePort
  ports:
  - name: https
    port: 443
    nodePort: 30443
# Open also the stats port
  - name: stats
    port: 1936
    nodePort: 30009
  selector:
    run: haproxy-ingress

# Deployment for the IM-web service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: im
  name: im-web
  labels:
    app: im
    tier: im-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: im
      tier: im-web
  template:
    metadata:
      labels:
        name: im-web
        app: im
        tier: im-web
    spec:
      nodeSelector:
        role: ingress-controller
      containers:
        - name: im-web
          image: "grycap/im-web:1.5.5-ssl"
          ports:
          - containerPort: 80
            protocol: TCP
            name: http
          - containerPort: 443
            protocol: TCP
            name: https
          env:
          - name: im_use_rest
            value: "true"
          - name: im_use_ssl
            value: "true"
          - name: im_host
            value: im-ingress-svc
          - name: im_port
            value: "443"
          - name: im_db
            value: "/etc/im-web/im-web/im.db"
          volumeMounts:
           - name: imetc
             mountPath: /etc/ssl/certs
           - name: imdb
             mountPath: /etc/im-web
          livenessProbe:
            httpGet:
              path: /im-web/
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: imetc
          persistentVolumeClaim:
            claimName: imetc
        - name: imdb
          persistentVolumeClaim:
            claimName: imdb

# IM-Web interface
---
apiVersion: v1
kind: Service
metadata:
  name: im-web-svc
  namespace: im
spec:
  type: NodePort
  ports:
  - name: https
    port: 443
    nodePort: 30080
  selector:
    name: im-web

