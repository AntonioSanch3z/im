------------------------------
 IM - Infrastructure Manager 
------------------------------

IM is a tool that deploys complex and customized virtual infrastructures on IaaS
Cloud deployments (such as AWS, OpenStack, etc.). It eases the access and the
usability of IaaS clouds by automating the VMI (Virtual Machine Image)
selection, deployment, configuration, software installation, monitoring and
update of the virtual infrastructure. It supports APIs from a large number of virtual
platforms, making user applications cloud-agnostic. In addition it integrates a
contextualization system to enable the installation and configuration of all the
user required applications providing the user with a fully functional
infrastructure.

This version evolved in the INDIGO-Datacloud project (https://www.indigo-datacloud.eu/). It is used by the [INDIGO Orchestrator](https://github.com/indigo-dc/orchestrator) to contact Cloud sites to finally deploy the VMs/containers. 

New features added:

+ Support for TOSCA 1.0 YAML specification with the custom node types described in https://github.com/indigo-dc/tosca-types/blob/master/custom_types.yaml
+ Support for the Identity and Access Management Service (IAM).
+ Support for the Token Translation Service (TTS) to support IAM authetication on OpenNebula Clouds.
+ Improvements to access OpenStack Clouds that support IAM.

Read the documentation and more at http://www.grycap.upv.es/im.

There is also an Infrastructure Manager YouTube reproduction list with a set of videos with demos
of the functionality of the platform: https://www.youtube.com/playlist?list=PLgPH186Qwh_37AMhEruhVKZSfoYpHkrUp.


1. INSTALLATION
===============

1.1 REQUISITES
--------------

IM is based on Python, so Python 2.6 or higher runtime and standard library must
be installed in the system.

If you use pip to install the IM, all the requisites will be installed.
However, if you install IM from sources you should install:

 * The RADL parser (https://github.com/grycap/radl), available in pip
   as the 'RADL' package.

 * The paramiko ssh2 protocol library for python version 1.14 or later
(http://www.lag.net/paramiko/), typically available as the 'python-paramiko' package.

 * The YAML library for Python, typically available as the 'python-yaml' or 'PyYAML' package.

 * The suds library for Python, typically available as the 'python-suds' package.
 
 * The Netaddr library for Python, typically available as the 'python-netaddr' package.

 * The Requests library for Python, typically available as the 'python-requests' package.

 * The TOSCA-Parser library for Python. Currently it must be used the INDIGO version located at 
   https://github.com/indigo-dc/tosca-parser but we are working to improve the mainstream version
   to enable to use it with the IM. 

 * Ansible (http://www.ansibleworks.com/) to configure nodes in the infrastructures.
   In particular, Ansible 1.4.2+ must be installed. The current recommended version is 1.9.4 untill the 2.X versions become stable.
   To ensure the functionality the following values must be set in the ansible.cfg file:

		[defaults]
		transport  = smart
		host_key_checking = False
		# For old versions 1.X
		sudo_user = root
		sudo_exe = sudo
		
		# For new versions 2.X
		become_user      = root
		become_method    = sudo
		
		[paramiko_connection]
		
		record_host_keys=False
		
		[ssh_connection]
		
		# Only in systems with OpenSSH support to ControlPersist
		ssh_args = -o ControlMaster=auto -o ControlPersist=900s
		# In systems with older versions of OpenSSH (RHEL 6, CentOS 6, SLES 10 or SLES 11) 
		#ssh_args =
		pipelining = True

1.2 OPTIONAL PACKAGES
---------------------

The Bottle framework (http://bottlepy.org/) is used for the REST API. It is typically available as the 'python-bottle' package.

he CherryPy Web framework (http://www.cherrypy.org/), is needed for the REST API. 
It is typically available as the 'python-cherrypy' or 'python-cherrypy3' package.
In newer versions (9.0 and later) the functionality has been moved to the 'cheroot' library
(https://github.com/cherrypy/cheroot) it can be installed using pip.

Boto (http://boto.readthedocs.org) 2.29.0 or later is used as interface to Amazon EC2.
It is available as package named python-boto in Debian based distributions.
It can also be downloaded from `boto GitHub repository (https://github.com/boto/boto).
Download the file and copy the boto subdirectory into the IM install path.

Apache-libcloud (http://libcloud.apache.org/) 0.17 or later is used in the LibCloud, OpenStack and GCE connectors.

In case of using the SSL secured version of the XMLRPC API the SpringPython
framework (http://springpython.webfactional.com/) must be installed.

In case of using the a MySQL DB as the backend to store IM data. The Python interface to MySQL
must be installed, typically available as the package 'python-mysqldb' or 'MySQL-python' package.
In case of using Python 3 use the PyMySQL package, available as the package 'python3-pymysql'
on debian systems or PyMySQL package in pip.

In case of using the SSL secured version of the REST API pyOpenSSL must be installed.

Azure python SDK (https://azure.microsoft.com/es-es/develop/python/) is used to connect with the 
Microsoft Azure platform.

1.3 INSTALLING
--------------

1.3.1 From RPM package
----------------------

You must have the epel repository enabled:

	$ yum install epel-release

Then you have to enable the INDIGO - DataCloud packages repositories. See full instructions 
at https://indigo-dc.gitbooks.io/indigo-datacloud-releases/content/generic_installation_and_configuration_guide_1.html#id4.
Briefly you have to download the repo file from http://repo.indigo-datacloud.eu/repos/1/indigo1.repo in your /etc/yum.repos.d folder.

	$ cd /etc/yum.repos.d
	$ wget http://repo.indigo-datacloud.eu/repos/1/indigo1.repo

And then install the GPG key for the INDIGO repository:

	$ rpm --import http://repo.indigo-datacloud.eu/repository/RPM-GPG-KEY-indigodc

Finally install the IM package.

	$ yum install IM

Azure python SDK is not available in CentOS. So if you need the Azure plugin you have to manually install them using pip:

	$ pip install msrest msrestazure azure-common azure-mgmt-storage azure-mgmt-compute azure-mgmt-network azure-mgmt-resource


1.3.2 From Deb package
----------------------

You have to enable the INDIGO - DataCloud packages repositories. See full instructions 
at https://indigo-dc.gitbooks.io/indigo-datacloud-releases/content/generic_installation_and_configuration_guide_1.html#id4.
Briefly you have to download the list file from http://repo.indigo-datacloud.eu/repos/1/indigo1-ubuntu14_04.list in your /etc/apt/sources.list.d folder.

	$ cd /etc/apt/sources.list.d
	$ wget http://repo.indigo-datacloud.eu/repos/1/indigo1-ubuntu14_04.list

And then install the GPG key for INDIGO the repository:

	$ wget -q -O - http://repo.indigo-datacloud.eu/repository/RPM-GPG-KEY-indigodc | sudo apt-key add -

Finally install the IM package.

	$ apt update
	$ apt install python-im

1.4 CONFIGURATION
-----------------

In case that you want the IM service to be started at boot time, you must
execute the next set of commands:

On Debian Systems:

	$ chkconfig im on

On RedHat Systems:

	$ update-rc.d im start 99 2 3 4 5 . stop 05 0 1 6 .

Or you can do it manually:

	$ ln -s /etc/init.d/im /etc/rc2.d/S99im
	$ ln -s /etc/init.d/im /etc/rc3.d/S99im
	$ ln -s /etc/init.d/im /etc/rc5.d/S99im
	$ ln -s /etc/init.d/im /etc/rc1.d/K05im
	$ ln -s /etc/init.d/im /etc/rc6.d/K05im

Adjust the installation path by setting the IMDAEMON variable at /etc/init.d/im
to the path where the IM im_service.py file is installed (e.g. /usr/local/im/im_service.py),
or set the name of the script file (im_service.py) if the file is in the PATH
(pip puts the im_service.py file in the PATH as default).

Check the parameters in $IM_PATH/etc/im.cfg or /etc/im/im.cfg. Please pay attention
to the next configuration variables, as they are the most important

DATA_DB - must be set to the URL to access the database to store the IM data. 
         Be careful if you have two different instances of the IM service running in the same machine!!.
         It can be a MySQL DB: 'mysql://username:password@server/db_name' or 
         a SQLite one: 'sqlite:///etc/im/inf.dat'.

CONTEXTUALIZATION_DIR - must be set to the full path where the IM contextualization files
		are located. In case of using pip installation the default value is correct
		(/usr/share/im/contextualization) in case of installing from sources set to
		$IM_PATH/contextualization (e.g. /usr/local/im/contextualization)

1.4.1 SECURITY
--------------

Security is disabled by default. Please notice that someone with local network access can "sniff" the traffic and
get the messages with the IM with the authorisation data with the cloud providers.

Security can be activated both in the XMLRPC and REST APIs. Setting this variables:

XMLRCP_SSL = True

or

REST_SSL = True

And then set the variables: XMLRCP_SSL_* or REST_SSL_* to your certificates paths.

2. DOCKER IMAGE
===============

A Docker image named `indigodatacloud/im` has been created to make easier the deployment of an IM service using the 
default configuration. Information about this image can be found here: https://hub.docker.com/r/indigodatacloud/im/.

How to launch the IM service using docker:

	$ sudo docker run -d -p 8899:8899 -p 8800:8800 --name im indigodatacloud/im 

You can use the IM as an entry point of an OpenNebula cloud provider as a TOSCA compliant endpoint for your site:

	$ sudo docker run -d -p 8899:8899 -p 8800:8800 -e IM_SINGLE_SITE_ONE_HOST=oneserver.com --name im indigodatacloud/im 
 
